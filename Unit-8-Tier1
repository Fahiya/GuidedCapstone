Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. 

Ans1. SELECT `name` FROM `Facilities` WHERE `membercost`!=0

Q2. How many facilities do not charge a fee to members?

Ans2. SELECT membercost, COUNT(*) FROM `Facilities` WHERE membercost = 0.0

Q3. Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question.

Ans3. SELECT Facilities.facid, name, Facilities.monthlymaintenance, Facilities.membercost
         FROM Facilities
         WHERE Facilities.membercost !=0
         AND Facilities.membercost < 0.2 * Facilities.monthlymaintenance
         
Q4. Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator.  

Ans4. SELECT *
         FROM Facilities
         WHERE Facilities.facid IN(1,5);
         
Q5. Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. 

Ans5. SELECT Facilities.monthlymaintenance, Facilities.name,
CASE
WHEN Facilities.monthlymaintenance >100 THEN 'expensive'
WHEN Facilities.monthlymaintenance <=100 
THEN 'cheap'
ELSE 'none' END AS Comment
FROM Facilities;

Q6. You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution

Ans6. SELECT Members.firstname, Members.surname
FROM Members
WHERE joindate = (SELECT MAX(Members.joindate)
 FROM Members)
 
Q7. Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name.

Ans7. SELECT DISTINCT Facilities.name, Bookings.memid, CONCAT(Members.firstname, ' ', Members.surname)AS membername
FROM Members
INNER JOIN Bookings
ON Members.memid = Bookings.memid
INNER JOIN Facilities
ON Facilities.facid = Bookings.facid
WHERE Facilities.name LIKE 'Tennis Court%'
ORDER BY membername

Q8. Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries.

Ans8. SELECT Bookings.bookid, Facilities.name, CONCAT(Members.firstname, ' ', Members.surname)AS membername, Facilities.guestcost AS cost
FROM Members
INNER JOIN Bookings
ON Members.memid = Bookings.memid
INNER JOIN Facilities
ON Facilities.facid = Bookings.facid
WHERE Facilities.guestcost>30 AND Bookings.starttime BETWEEN '2012-09-14 00:00:00' AND '2012-09-14 23:30:00'
ORDER BY cost DESC

Q9. This time, produce the same result as in Q8, but using a subquery. 

Ans9. SELECT Bookings.bookid, Facilities.name, CONCAT(Members.firstname, ' ', Members.surname)AS membername, Facilities.guestcost AS cost
FROM Members
INNER JOIN Bookings
ON Members.memid = Bookings.memid
INNER JOIN Facilities
ON Facilities.facid = Bookings.facid
WHERE Facilities.guestcost>30 AND Bookings.starttime IN(SELECT Bookings.starttime AS time
FROM Bookings
WHERE Bookings.starttime BETWEEN '2012-09-14 00:00:00' AND '2012-09-14 23:30:00')
Q10. Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members!

Ans10. SELECT Facilities.name, Facilities.initialoutlay AS revenue
FROM Facilities
WHERE Facilities.initialoutlay < 1000
ORDER BY Facilities.initialoutlay
Q11. Produce a report of members and who recommended them in alphabetic surname,firstname order 

Ans11. SELECT T2.surname AS recommendersurname, T2.firstname AS recommenderfirstname, 
T1.surname AS membersurname, T1.firstname AS memberfirstname, T1.memid, T2.memid AS recommenderid
FROM Members AS T1
LEFT JOIN Members AS T2
ON T1.memid = T2.recommendedby
ORDER BY recommendersurname
Q12. Find the facilities with their usage by member, but not guests 

Ans12. SELECT DISTINCT Facilities.name, Facilities.facid, CONCAT(Members.firstname, ' ', Members.surname)AS membername
FROM Members
INNER JOIN Bookings
ON Members.memid = Bookings.memid
INNER JOIN Facilities
ON Facilities.facid = Bookings.facid
WHERE Members.memid !=0
ORDER BY membername			

Q13. Find the facilities usage by month, but not guests

Ans13. SELECT DISTINCT Facilities.name, Facilities.facid, CONCAT(Members.firstname, ' ', Members.surname)AS membername, Bookings.starttime
FROM Members
INNER JOIN Bookings
ON Members.memid = Bookings.memid
INNER JOIN Facilities
ON Facilities.facid = Bookings.facid
WHERE Members.memid !=0
ORDER BY Bookings.starttime
